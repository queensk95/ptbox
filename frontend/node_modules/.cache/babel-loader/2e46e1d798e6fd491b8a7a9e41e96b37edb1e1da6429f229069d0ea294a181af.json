{"ast":null,"code":"import axios from\"axios\";const API_BASE_URL=\"http://localhost:5000\";// Change if the backend URL is different\n/**\r\n * Initiate a scan using the selected tool.\r\n * @param {string} domain - The domain to scan (e.g., \"example.com\").\r\n * @param {string} tool - The tool to use (\"theHarvester\" or \"Amass\").\r\n * @returns {Promise<object>} - The scan results.\r\n */export const initiateScan=async(domain,tool)=>{try{const response=await axios.post(`${API_BASE_URL}/scan`,{domain,tool});return response.data;}catch(error){var _error$response;console.error(\"Error initiating scan:\",error);throw((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data)||{error:\"An unexpected error occurred\"};}};/**\r\n * Export scan results as an Excel file.\r\n * @param {string} domain - The domain whose results should be exported.\r\n * @returns {Promise<Blob>} - The exported Excel file.\r\n */export const exportResults=async domain=>{try{const response=await axios.get(`${API_BASE_URL}/export`,{params:{domain},responseType:\"blob\"// Ensure the response is treated as a file\n});return response.data;}catch(error){var _error$response2;console.error(\"Error exporting results:\",error);throw((_error$response2=error.response)===null||_error$response2===void 0?void 0:_error$response2.data)||{error:\"An unexpected error occurred\"};}};","map":{"version":3,"names":["axios","API_BASE_URL","initiateScan","domain","tool","response","post","data","error","_error$response","console","exportResults","get","params","responseType","_error$response2"],"sources":["C:/Users/theka/PycharmProjects/final/frontend/src/api/api.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst API_BASE_URL = \"http://localhost:5000\"; // Change if the backend URL is different\r\n\r\n/**\r\n * Initiate a scan using the selected tool.\r\n * @param {string} domain - The domain to scan (e.g., \"example.com\").\r\n * @param {string} tool - The tool to use (\"theHarvester\" or \"Amass\").\r\n * @returns {Promise<object>} - The scan results.\r\n */\r\nexport const initiateScan = async (domain, tool) => {\r\n    try {\r\n        const response = await axios.post(`${API_BASE_URL}/scan`, { domain, tool });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Error initiating scan:\", error);\r\n        throw error.response?.data || { error: \"An unexpected error occurred\" };\r\n    }\r\n};\r\n\r\n/**\r\n * Export scan results as an Excel file.\r\n * @param {string} domain - The domain whose results should be exported.\r\n * @returns {Promise<Blob>} - The exported Excel file.\r\n */\r\nexport const exportResults = async (domain) => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE_URL}/export`, {\r\n            params: { domain },\r\n            responseType: \"blob\", // Ensure the response is treated as a file\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Error exporting results:\", error);\r\n        throw error.response?.data || { error: \"An unexpected error occurred\" };\r\n    }\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAEzB,KAAM,CAAAC,YAAY,CAAG,uBAAuB,CAAE;AAE9C;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,YAAY,CAAG,KAAAA,CAAOC,MAAM,CAAEC,IAAI,GAAK,CAChD,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAL,KAAK,CAACM,IAAI,CAAC,GAAGL,YAAY,OAAO,CAAE,CAAEE,MAAM,CAAEC,IAAK,CAAC,CAAC,CAC3E,MAAO,CAAAC,QAAQ,CAACE,IAAI,CACxB,CAAE,MAAOC,KAAK,CAAE,KAAAC,eAAA,CACZC,OAAO,CAACF,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9C,KAAM,EAAAC,eAAA,CAAAD,KAAK,CAACH,QAAQ,UAAAI,eAAA,iBAAdA,eAAA,CAAgBF,IAAI,GAAI,CAAEC,KAAK,CAAE,8BAA+B,CAAC,CAC3E,CACJ,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAG,aAAa,CAAG,KAAO,CAAAR,MAAM,EAAK,CAC3C,GAAI,CACA,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAL,KAAK,CAACY,GAAG,CAAC,GAAGX,YAAY,SAAS,CAAE,CACvDY,MAAM,CAAE,CAAEV,MAAO,CAAC,CAClBW,YAAY,CAAE,MAAQ;AAC1B,CAAC,CAAC,CACF,MAAO,CAAAT,QAAQ,CAACE,IAAI,CACxB,CAAE,MAAOC,KAAK,CAAE,KAAAO,gBAAA,CACZL,OAAO,CAACF,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChD,KAAM,EAAAO,gBAAA,CAAAP,KAAK,CAACH,QAAQ,UAAAU,gBAAA,iBAAdA,gBAAA,CAAgBR,IAAI,GAAI,CAAEC,KAAK,CAAE,8BAA+B,CAAC,CAC3E,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}